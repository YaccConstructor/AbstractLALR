// Implementation file for parser generated by fsyacc
module ParserCalc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "ParserCalc.fsy"


# 9 "ParserCalc.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | L
  | R
  | MINUS
  | PLUS
  | NUM
  | ID
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_L
    | TOKEN_R
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_NUM
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startS
    | NONTERM_S
    | NONTERM_OP
    | NONTERM_T

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | L  -> 0 
  | R  -> 1 
  | MINUS  -> 2 
  | PLUS  -> 3 
  | NUM  -> 4 
  | ID  -> 5 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_L 
  | 1 -> TOKEN_R 
  | 2 -> TOKEN_MINUS 
  | 3 -> TOKEN_PLUS 
  | 4 -> TOKEN_NUM 
  | 5 -> TOKEN_ID 
  | 8 -> TOKEN_end_of_input
  | 6 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startS 
    | 1 -> NONTERM_S 
    | 2 -> NONTERM_S 
    | 3 -> NONTERM_OP 
    | 4 -> NONTERM_OP 
    | 5 -> NONTERM_T 
    | 6 -> NONTERM_T 
    | 7 -> NONTERM_T 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 8 
let _fsyacc_tagOfErrorTerminal = 6

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | L  -> "L" 
  | R  -> "R" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | NUM  -> "NUM" 
  | ID  -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | L  -> (null : System.Object) 
  | R  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | NUM  -> (null : System.Object) 
  | ID  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 2us; 65535us; 0us; 1us; 8us; 2us; 2us; 65535us; 1us; 3us; 2us; 3us; 3us; 65535us; 0us; 5us; 3us; 4us; 8us; 5us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 4us; 7us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 2us; 0us; 1us; 2us; 1us; 5us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 5us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; |]
let _fsyacc_action_rows = 12
let _fsyacc_actionTableElements = [|3us; 32768us; 0us; 8us; 4us; 11us; 5us; 10us; 2us; 49152us; 2us; 7us; 3us; 6us; 3us; 32768us; 1us; 9us; 2us; 7us; 3us; 6us; 3us; 32768us; 0us; 8us; 4us; 11us; 5us; 10us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 3us; 32768us; 0us; 8us; 4us; 11us; 5us; 10us; 0us; 16389us; 0us; 16390us; 0us; 16391us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 7us; 11us; 15us; 16us; 17us; 18us; 19us; 23us; 24us; 25us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 3us; 1us; 1us; 1us; 3us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 65535us; 16385us; 16386us; 16387us; 16388us; 65535us; 16389us; 16390us; 16391us; |]
let _fsyacc_reductions ()  =    [| 
# 104 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startS));
# 113 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'OP)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'T)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "ParserCalc.fsy"
                                1
                   )
# 18 "ParserCalc.fsy"
                 : int));
# 126 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'T)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "ParserCalc.fsy"
                                        1
                   )
# 18 "ParserCalc.fsy"
                 : int));
# 137 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "ParserCalc.fsy"
                              1
                   )
# 19 "ParserCalc.fsy"
                 : 'OP));
# 147 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "ParserCalc.fsy"
                                          1
                   )
# 19 "ParserCalc.fsy"
                 : 'OP));
# 157 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "ParserCalc.fsy"
                               1
                   )
# 20 "ParserCalc.fsy"
                 : 'T));
# 168 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "ParserCalc.fsy"
                                        1
                   )
# 20 "ParserCalc.fsy"
                 : 'T));
# 178 "ParserCalc.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "ParserCalc.fsy"
                                                  1
                   )
# 20 "ParserCalc.fsy"
                 : 'T));
|]
# 189 "ParserCalc.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 9;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let S lexer lexbuf : int =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
